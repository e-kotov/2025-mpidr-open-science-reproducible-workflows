{
  "hash": "f1072ce669b796afa4a733a7d13ff163",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"1. R packages version management\"\nfrom: markdown+emoji\ncode-annotations: hover\neval: false\nnumber-sections: true\n---\n\n\n\n\n[Skip to exercise \\>\\>](#exercise)\n\n# Key packages summary\n\n\n|  |  |\n|--------------------------------|----------------------------------------------------|\n| [`{renv}`](#renv) | Sets up an R package library on a per-project level. Each project where you activate `renv` with [`renv::init()`](https://rstudio.github.io/renv/reference/init.html){target=\"_blank\"} will have it's own independent library with specific R package versions that will not interfere with either your default system/user libraries or with any other project. |\n| [`{pak}`](#pak) | Significantly speeds up R package installation by using multiple threads to download and install both requested packages and their dependencies. Can be used to install [CRAN](https://cran.r-project.org/){target=\"_blank\"} and [Bioconductor](https://www.bioconductor.org/){target=\"_blank\"} packages, as well as packages from GitHub or any other repository. Can be used independently from `{renv}`, or as a companion of `{renv}` . |\n: {tbl-colwidths=\"[15,85]\"}\n\n## `{renv}` {#renv}\n\n### What does `{renv}` do?\n\n[`{renv}`](https://rstudio.github.io/renv/){target=\"_blank\"} takes over the location of the R package installation and the command `install.packages()`. After initialising `{renv}` for a particular project/working directory, all your packages installations and removals will be taken care of by `{renv}`. From now on, whenever you use `install.packages()` in that project, `{renv}` will install the package into the project directory.\n\n::: callout-note\nActually, `{renv}` will install the packages into user cache folder defined by the operating system (this is different from the default user folder for R package installation), and will \"link\" the packages into your project (or projects) directory(-ies). For example, you have two projects with different versions of `{ggplot2}`, but the same versions of `{dplyr}`. The `{renv}` packages cache will have two versions of `{ggplot2}` and one version of `{dplyr}`. Your projects however, will only contain \"links\" to the cache, therefore, you will not have two identical copies of `{dplyr}` on disk in two project directories, as they will both just point to the cached version of `{dplyr}` in `{renv}`'s cache folder. You can read more about it [here](https://rstudio.github.io/renv/articles/package-install.html#cache){target=\"_blank\"}\n:::\n\n### Under the hood of `renv`\n\nWhen you install `{renv}` and run [`renv::init()`](https://rstudio.github.io/renv/reference/init.html){target=\"_blank\"} in the current project/working directory, it reates several files and directories in your current project/working directory (see @fig-renv-files).\n\n![Files and folders created by `renv` when initialized](media/images/renv-files.png){#fig-renv-files}\n\n-   `{renv}` creates an invisible `.Rprofile` text file your current project/working directory. This file may contain any R code, and when `R`/`RStudio` is started in that directory, the commands in this file get executed. `{renv}` adds a line `source(\"renv/activate.R\")` which runs a script that activates `{renv}` for this particular project every time `R`/`RStudio` is started in this directory.\n\n-   `{renv}` also creates an `renv` folder, where it will store all R scripts that it requires to function, and also the packages that you install for this particular project.\n\n-   `{renv}` also creates an `renv.lock` file, which stores the exact versions of R packages you install, as well as the sources where you install them from. That is, it keeps track if the package was installed from CRAN, Bioconductor, GitHub repository, or any other source.\n\n\n\n\n## `{pak}` {#pak}\n\n### What does `{pak}` do?\n\n[`{pak}`](https://pak.r-lib.org/){target=\"_blank\"} can be used instead of R's default `install.packages()` to install R packages and their dependencies faster.\n\nIt can also serve as a so-called \"backend\" for [`{renv}`](#renv), that is it will help `{renv}` to install packages and their dependencies much faster when you, or someone who reproduces your code, such as your collaborator, use [`{renv}`](#renv) to fully restore the R package environment of a project on a new computer.\n\n# Exercise {#exercise}\n\n## Goal\n\nThe goal of this exercise is setup a new blank project with isolated R packages library using [`{renv}`](#renv) and [`{pak}`](#pak) in such a way, so that all the specific package versions can be restored on a new computer or in a new folder.\n\nThe tutorial is long and detailed, however in essence it is just a few steps. In @fig-tutorial-overiew you can find a summary of the steps and can click on them to get directly to the corresponding section of the exercise.\n\n\n\n\n```{mermaid}\n%%| label: fig-tutorial-overiew\n%%| fig-cap: \"Tutorial steps overview\"\n%%| eval: true\nflowchart TD\n    A[\"Create project folder & set package repository\"] --> B[\"Initialize renv: **renv::init()**\"]\n    B --> C[\"Configure renv: set snapshot type to 'all' and enable Posit Package Manager\"]\n    C --> D[\"Install **pak** to speed up package installs and instruct **renv** to use it\"]\n    D --> E[\"Install packages (e.g., targets)\"]\n    E --> F[\"Snapshot package versions: **renv::snapshot()**\"]\n    F --> G[\"Test restoration: copy project, delete renv/library, run **renv::restore()**\"]\n\n    click A \"#create-project\"\n    click B \"#renv-init\"\n    click C \"#renv-config\"\n    click D \"#install-pak\"\n    click E \"#install-packages\"\n    click F \"#snapshot\"\n    click G \"#test-restore\"\n```\n\n\n\n\n\n::: {.callout-note}\nYou can find the repository with the expected end result of the exercise at [https://github.com/e-kotov/2025-mpidr-workflows-reference-01](https://github.com/e-kotov/2025-mpidr-workflows-reference-01){target=\"_blank\"}. If you would like to skip the exercise and just see how the package restoration process with `{renv}` works, feel free to download/clone this repository and follow the instructions starting with the [Test R packages restoration](#test-restore) step.\n:::\n\n## Instructions\n\n### Create a new project folder {#create-project}\n\nCreate a new folder wherever you would normally create a folder for a new research project.\n\nIf you are using RStudio, use the menu `File -> New Project`, then select `New Directory -> New Project` and set the folder name and location. You may select `Use renv with this project` in the end of the project creation wizard, but we would advice to skip it for now, as we will set this up in the next step.\n\nIf you are using [`Visual Studio Code`](https://code.visualstudio.com/){target=\"_blank\"} or the new [`Positron`](https://positron.posit.co/){target=\"_blank\"} (the future replacement for `RStudio` based on `Visual Studio Code`), just create a folder manually and open it in the respective editor.\n\nIf you are using some other editor, follow the usual procedure you know to create a new project.\n\nIn any case, once you are ready, run the following command in the R console to make sure that the current working directory is the project directory you intended to create and use:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetwd()\n```\n:::\n\n\n\n\n### Setup packages repository\n\nBy default, your `R` installation probably installs packages from CRAN ( https://cran.r-project.org/ ) or from CRAN mirror hosted by RStudio/Posit ( https://cran.rstudio.com/ ). These repositories are updated every day with latest R package versions, so you never know, which version of a package you will get when you install it. You can check which repository is used with:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetOption(\"repos\")\n```\n:::\n\n\n\n\nYou will probably see:\n\n```r\nCRAN \n\"https://cran.rstudio.com\" \n```\n\nor:\n\n```r\n CRAN\n\"@CRAN@\"\n```\n\nTo have more control over which versions are installed, you may set the repository to [Posit Package Manager](https://packagemanager.posit.co/){target=\"_blank\"} and constrain it to a certain date:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(repos = \"https://packagemanager.posit.co/cran/2025-02-28\")\n```\n:::\n\n\n\n\nIf you run `getOption(\"repos\")` again, you should see the URL you have entered above. If it is set, the package versions you install will always correspond to the date you used. This allows you to freeze the packages you use for your project in time and prevent installation of new versions which may break your code. You may change the date for this setting later and update the packages, test your code with newer versions and decide if you need to revert to older versions.\n\n::: {.callout-note}\nUnlike CRAN, Posit Package Manager provides pre-compiled binaries of R packages for Linux. This is particularly beneficial for Linux users and for last steps in this tutorial, where we build containers that are also based on Linux. Typically, R packages on Linux are installed from source, which can be time-consuming, and installing pre-compiled binaries speeds up the installation process significantly.\n:::\n\n::: {.callout-important}\nThe `repos` option should be set before you move to the next step and initialise `{renv}`, as at the time of initialisation, `{renv}` will use the current value of the `repos` option. The option may be changed later, including manually in the `renv.lock` file.\n:::\n\n\n### Install `{renv}`\n\nInstall `{renv}` as you normally would. You should not install any other packages at this point, as after installing and initizalising `{renv}`, you would need to install then again, as R will start using your project directory as a package library and will not see any previously user-installed packages anymore.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"renv\")\n```\n:::\n\n\n\n\n\n### Initialise `{renv}` {#renv-init}\n\nInitialise `{renv}` in the current project/working directory:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrenv::init()\n```\n:::\n\n\n\n\nYou should get a message like this (your `R` and `{renv}` versions may be different):\n\n```r\nThe following package(s) will be updated in the lockfile:\n\n# CRAN -----------------------------------------------------------------------\n- renv   [* -> 1.1.1]\n\nThe version of R recorded in the lockfile will be updated:\n- R      [* -> 4.4.3]\n\n- Lockfile written to \"path-to-your-project/renv.lock\".\n- renv activated -- please restart the R session.\n```\n\n::: {.callout-important}\nAt this point, you need to restart the R session for `{renv}` to work. Do not ignore this instruction, as otherwise the rest of the steps will not work.\n:::\n\nFeel free to double check if the `{renv}` related files have been created in your project, as was shown in @fig-renv-files in the previous section.\n\n\n### Customize the `{renv}` configuration {#renv-config}\n\nBefore you proceed, a few options related to `{renv}` operation should be set manually.\n\n#### Force `{renv}` to record all packages\n\nBy default, `{renv}` tries to automatically identify which packages you actually use in your project and adds those to the lockfile `renv.lock` which would later be used to restore the package versions on a new computer. It does this by scanning all `*.R` script files in your project/working directory and tries to find lines like `library(ggplot2)`. Unfortunately, it does not always do it well, and you may also have another way of loading the packages that `{renv}` does not recognize.\n\nTherefore, it is better to just force `{renv}` to keep track not just the packages it \"thinks\" you use, but all packages you install while working with the current project. To do that, run the folliwing code in the `R` console:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrenv::settings$snapshot.type(value = \"all\")\n```\n:::\n\n\n\n\nThis will change the setting in the `renv/settings.json` file. You could of course also open the file in editor and change the setting manually. You can find more information on this setting in the official [`{renv}` documentation](https://rstudio.github.io/renv/reference/snapshot.html){target=\"_blank\"}.\n\n#### Instruct `{renv}` to use Posit Package Manager\n\nWe have already set the `repos` option above to the Posit Package Manager, but it is also worth enabling the corresponding option in `{renv}` with:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrenv::settings$ppm.enabled(value = TRUE)\n```\n:::\n\n\n\n\n\n### Install `{pak}` {#install-pak}\n\nNow install `{pak}` as you normally would. We also suggest that you install `usethis` package, as it provides some useful functions to easily edit configuration some files and setup certain files in the project from templates:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(c(\"pak\", \"usethis\"))\n```\n:::\n\n\n\n\n::: {.callout-note}\nNote that even though you are using `install.packages()`, the installation process will look slightly different because `{renv}` is active in the current project.\n\n```r\n# Downloading packages -------------------------------------------------------\n- Downloading jsonlite from CRAN ...            OK [1.1 Mb in 0.66s]\n- Downloading httr2 from CRAN ...               OK [718.6 Kb in 0.61s]\nSuccessfully downloaded 2 packages in 4.9 seconds.\n```\n\nYou will also be asked if you would like to install extra packages, to which you should agree. This is because `{renv}` is taking over the package installation process.\n\n```r\nThe following package(s) will be installed:\n- askpass     [1.2.1]\n- cli         [3.6.4]\n...\n- yaml        [2.3.10]\n- zip         [2.3.2]\nThese packages will be installed into \"path-to-your-project/renv/library/macos/R-4.4/aarch64-apple-darwin20\".\n\nDo you want to proceed? [Y/n]:\n```\n\n:::\n\n### Enable `{pak}` as a backend for `{renv}`\n\nTo make `{renv}` use `{pak}` as a \"backend\" and therefore install packages and their dependencies faster, you need to add another line to your `.Rprofile` file in the current project/working directory. Either locate and edit the file manually (you may need to enable the display of hidden files in your editor or system), or you can run this command to open it in the editor automatically:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::proj_set(\".\", force = TRUE) # force sets the current direcotry as a project\nusethis::edit_r_profile(\"project\") # opens the project level .Rprofile file in the editor\n```\n:::\n\n\n\n\nIn line with the [`{renv}` documentation](https://rstudio.github.io/renv/reference/config.html#renv-config-pak-enabled), add this line to the end of the file:\n\n```r\noptions(\"renv.config.pak.enabled\" = TRUE)\n```\n\n::: {.callout-warning}\n`{renv}`'s support for `{pak}` is still officially experimental, even though in practice it is quite stable. However, it may not work correctly in all cases. If something does not work, simply remove the line from the `.Rprofile` file. Everything will work fine without it, it's just that the package installation process will be slower.\n:::\n\n\nSo your new `.Rprofile` file should look like this:\n\n```r\nsource(\"renv/activate.R\")\noptions(\"renv.config.pak.enabled\" = TRUE)\n```\n\nAs these lines are only executed when `R` starts in the project directory, to apply it in the current `R` session, you will need to run the same command in the `R` console:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(\"renv.config.pak.enabled\" = TRUE)\n```\n:::\n\n\n\n\n::: {.callout-note}\nAlternatively, you can also restart the R session to make the changes take effect.\n:::\n\n\n### Try installing packages {#install-packages}\n\nNow you can try to install a new package to see if `{renv}` works with `{pak}`. In the next exercise, we will need the `{targets}` package, so we can try installing it:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"targets\")\n```\n:::\n\n\n\n\nIf you have setup both `{renv}` and `{pak}` correctly, you should see a new interface of the package installation process. You will be presented with the installation plan (@fig-package-installation-process1) and asked to confirm.\n\n![Package installation process with `{renv}` and `{pak}` - installation plan preview](media/images/install-targets-with-renv-pak-1.png){#fig-package-installation-process1 width=70%}\n\nOnce you confirm with \"Y\" and \"Enter/Return\", packages will be installed:\n\n![Package installation process with `{renv}` and `{pak}` - executing installation plan](media/images/install-targets-with-renv-pak-2.png){#fig-package-installation-process2 width=70%}\n\nYou can check that the `{targets}` package is installed by trying to load it:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(targets)\n```\n:::\n\n\n\n\n::: callout-note\nIf you have not had `targets` installed prior to starting this exercise, it does not exist in your default user R library, but only exists in the `{renv}` R package cache and in the current project directory. If you would like to check this, you can start another `R`/`RStudio` session in a differnt project directory and try to load `targets` there. It should fail, as there is no `targets` package in the default user R library.\n:::\n\n### Save the package versions into lockfile {#snapshot}\n\nYou can install and remove packages as usual while working with your project. Whenever you are done with testing your code and are certain that the installed packages are suffient to reproduce your code, you can \"lock\" the package list and their versions with `{renv}`.\n\nTo check the current status of the R package versions snapshot, you can run the following command:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrenv::status()\n```\n:::\n\n\n\n\nYou should get something like this:\n\n```r\nThe following package(s) are in an inconsistent state:\n\npackage     installed recorded used\naskpass     y         n        y   \nbackports   y         n        y   \n....\nyaml        y         n        y   \nzip         y         n        y   \n\nSee `?renv::status` for advice on resolving these issues.\n```\n\nAs you can see from the `recorded` column, none of the package versions are currently recorded (snapshotted) in the `renv.lock` lockfile. To save the package list and their versions into the lockfile, you can run the following command:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrenv::snapshot()\n```\n:::\n\n\n\n\nYou may get a warning message for some missing dependencies, which you may have to install manually. For example:\n\n```r\nThe following required packages are not installed:\n- cpp11  [required by igraph]\nConsider reinstalling these packages before snapshotting the lockfile.\n```\n\nIf you get something like this, you should install the missing package(s) and then run `renv::snapshot()` again.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"cpp11\")\nrenv::snapshot()\n```\n:::\n\n\n\n\nThen check the status again:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrenv::status()\n```\n:::\n\n\n\n\nYou should repeat this until after running `renv::status()` you get:\n\n```r\nNo issues found -- the project is in a consistent state.\n```\n\n::: {.callout-note}\nYou can also manually open the `renv.lock` file in the editor and search for pacakges such as `targets` to see if they were snapshotted successfully.\n:::\n\n\n### Test R packages restoration {#test-restore}\n\nIn the steps above you have created a project directory with fully isolated independent R package library. Now is the time to do a simple test, whether you can restore the R package environment of a project on a new computer, or at least in a new folder.\n\nTo quickly test with the new folder, close your `R`/`RStudio` (or whichever other editor you are using) and create a of the the project folder in a new location on your computer. Once copied, manually delete the `renv/library` folder at this new location. Now open the new project folder with the deleted `renv/library` folder in your editor.\n\n::: {.callout-note}\nInstead of using your own project, you can also use the [https://github.com/e-kotov/2025-mpidr-workflows-reference-01](https://github.com/e-kotov/2025-mpidr-workflows-reference-01){target=\"_blank\"} repository for the test. Just download/clone it to your computer and proceed with the steps below.\n:::\n\nOnce `R` starts in this new project directory you should see the following message:\n\n```r\nOK\n- Installing renv  ... OK\n\n- Project 'path/to/your/project-copy' loaded. [renv 1.1.1]\n- One or more packages recorded in the lockfile are not installed.\n- Use `renv::status()` for more details.\n```\n\nThis means that `R` found the `.Rrofile` file in the project root and exectuted all of the commands there. The first command was to run all the code in `renv/activate.R` which would automatically install `{renv}` on a new computer if it was not installed yet. It has also checked briefly the installation status of the packages recorded in the `renv.lock` file against the project package library, ignoring any packages installed by the user into the system wide user R packages library.\n\nFeel free to run `renv::status()` to check the status of the packages, but this is optional.\n\nTo restore all pacakge versions, run `renv::restore(prompt = FALSE)`. Agree to installing `{pak}`, and the installation of the rest of the packages will be handled without further prompts. Once the process finishes, you should be able to check the status again:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrenv::status()\n```\n:::\n\n\n\n\nYou may get a warning message for the `{pak}` package version, which is normall. You can either reinstall the package and make a snapshot again, or just make a snapshot with `renv::snapshot()`.\n\nIn the end you should be able to get `No issues found -- the project is in a consistent state.` when running `renv::status()`.\n\n::: {.callout-note}\nYou can also manually check if the `renv/library` folder has been created in this new copy of the original project and if it contains subfolders for the packages.\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}